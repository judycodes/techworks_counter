{"version":3,"sources":["App.js","serviceWorker.js","index.js","sheep.png","fence.png"],"names":["Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleIncrement","state","counter","toggle","setState","handleReset","alert","handleDecrement","handleToggle","prevState","doublesAvailable","sheep","react_default","a","createElement","className","class","src","alt","fence","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wQA6HeA,cAvHb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYJI,gBAAkB,WAGVP,EAAKQ,MAAMC,QAAU,GAEnBT,EAAKQ,MAAME,OACbV,EAAKW,SAAS,CAAEF,QAAST,EAAKQ,MAAMC,QAAU,IAE9CT,EAAKW,SAAS,CAAEF,QAAST,EAAKQ,MAAMC,QAAU,KAIhDT,EAAKY,cACLC,MAAM,sFA1BKb,EA+BjBc,gBAAkB,WAGZd,EAAKQ,MAAMC,QAAU,EAEnBT,EAAKQ,MAAME,OACbV,EAAKW,SAAS,CAAEF,QAAST,EAAKQ,MAAMC,QAAU,IAG9CT,EAAKW,SAAS,CAAEF,QAAST,EAAKQ,MAAMC,QAAU,KAIhDT,EAAKY,cACLC,MAAM,kDA7COb,EAkDjBY,YAAc,WAEZZ,EAAKW,SAAS,CACZF,QAAS,KArDIT,EA0DjBe,aAAe,WAEbf,EAAKW,SACH,SAASK,GACP,MAAO,CAACC,kBAAmBD,EAAUC,iBAErCP,QAAUM,EAAUN,WA7DtBV,EAAKQ,MAAQ,CACXC,QAAS,EACTC,QAAQ,EACRO,kBAAkB,EAClBC,OAAO,GAPIlB,wEA+Ef,OAEEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,IACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,eADA,KAGEH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,gBACXJ,EAAAC,EAAAC,cAAA,UAAKlB,KAAKK,MAAMC,SADhB,IAEAU,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cAAcE,IAAKN,IAAOO,IAAI,WAG/CN,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QAAQE,IAAKE,IAAOD,IAAI,YAKzCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEbH,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAY,UAAUM,QAAWzB,KAAKI,iBAA5D,OAFF,IAIEY,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAY,WAAYM,QAAWzB,KAAKW,iBAA9D,OAJF,IAMEK,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAY,UAAUM,QAAWzB,KAAKS,aAA5D,SANF,IAQEO,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAY,YAAYM,QAASzB,KAAKY,cAAeZ,KAAKK,MAAMS,iBAAmB,oBAAsB,qBARjI,cAlGUY,aCOFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.50f9b838.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport sheep from \"./sheep.png\";\r\nimport fence from \"./fence.png\";\r\n\r\nclass Counter extends Component {\r\n  constructor () {\r\n    super();\r\n\r\n    this.state = {\r\n      counter: 0,\r\n      toggle: true, //initialized at single incremements\r\n      doublesAvailable: true, //incrementing/decrementing by 2 option is available/\"true\" at initialization\r\n      sheep: false //sheep jumping is initialized as false, once true, the sheep will jump \r\n    };\r\n  \r\n  }\r\n\r\n//=======[EVENTS]============\r\nhandleIncrement = () => {//method for button to run when increment button is clicked\r\n    //state change for incrementing within range max of 20\r\n\r\n    if (this.state.counter < 20) { //if state counter is less than 20, allow incrementing \r\n    \r\n      if (this.state.toggle) {\r\n        this.setState({ counter: this.state.counter + 1}); //increments by 1 depending on state of toggle\r\n      } else {\r\n        this.setState({ counter: this.state.counter + 2 }); //increments by 2 depending on state of toggle\r\n      }\r\n\r\n    } else { //state counter is more than 20 causes an alert pops up and resets the state of counter back to zero\r\n      this.handleReset();\r\n      alert(\"SORRY, THERE'S NOT ENOUGH SHEEP FOR THIS SLEEPLESS NIGHT! COUNT THEM OVER AGAIN!\");\r\n    }\r\n    \r\n  };\r\n \r\nhandleDecrement = () => {\r\n   //state change for incrementing within range min of 0\r\n\r\n  if (this.state.counter > 0) { //if state counter is more than 0, allow decrementing\r\n\r\n    if (this.state.toggle) {\r\n      this.setState({ counter: this.state.counter - 1}); //decrements by 1 depending on state of toggle\r\n    \r\n    } else {\r\n      this.setState({ counter: this.state.counter - 2}); //decrements by 2 depending on state of toggle\r\n    }\r\n\r\n  } else { //state counter is less than zero causes an alert pops up and resets the state of counter back to zero\r\n    this.handleReset();\r\n    alert('YOUR SHEEP RAN OFF RANGE! START COUNTING UP!');\r\n  }\r\n\r\n};\r\n\r\nhandleReset = () => { //method that causes state of counter to return to zero\r\n\r\n  this.setState({\r\n    counter: 0\r\n  })\r\n\r\n};\r\n\r\nhandleToggle = () => { //toggles between incrementing/decrementing by 1 or 2 and the text displayed in toggle button\r\n  \r\n  this.setState(\r\n    function(prevState) { //function passes prevState, which is current values of state properties. prevState starts at increments/decrements of 1\r\n      return {doublesAvailable: !prevState.doublesAvailable, //changes state properties and shows what option is available on toggle button: \r\n        //if toggle button displays 'change to + / - 2', then counter is incrementing/decrementing by 1, if it displays 'back to 1', then counter is incrementing/decrementing by 2\r\n      toggle : !prevState.toggle}; //toggles between which increment/decrement option is available\r\n        \r\n    });\r\n    //when toggle button is pressed/clicked, the state properties are changed to false\r\n    //so toggle initalized as true and incrementing/decrementing by 1, now is false and increments/decrements by 2\r\n    //AND toggle button initalized as true, not is false and displays the option to return to incrementing/decrementing by 1 \r\n    \r\n};\r\n\r\n\r\n//=======[RENDER]============\r\n\r\nrender() {\r\n\r\n\r\n  return (\r\n\r\n    <div className = \"container\"> \r\n          <div className=\"counter\"> {/* COUNTER COMPONENT WRAPPER*/}\r\n          <div className=\"navbar\">count sheep</div>  {/* COMPONENT TITLE */}\r\n\r\n            <div class=\"countTracker\">\r\n            <h1>{this.state.counter}</h1> {/*DISPLAYS CURRENT COUNT*/}\r\n            <div className = \"images\">\r\n            <div className = \"sheepContainer\">\r\n            <img className = \"animateJump\" src={sheep} alt=\"sheep\"/>\r\n            </div>\r\n\r\n            <img className = \"fence\" src={fence} alt=\"fence\"/>\r\n\r\n          </div>\r\n            </div>\r\n\r\n            <div className=\"buttonWrapper\">\r\n\r\n              <button type=\"button\" className = \"plusBtn\" onClick = {this.handleIncrement}> + </button> {/* Adds 1 or 2 depending on toggle state */}\r\n\r\n              <button type=\"button\" className = \"minusBtn\"  onClick = {this.handleDecrement}> - </button> {/*Subtracts 1 or 2 depending on toggle state */}\r\n\r\n              <button type=\"button\" className = \"zeroBtn\" onClick = {this.handleReset}>Reset</button> {/* Resets counter count to zero */}\r\n\r\n              <button type=\"button\" className = \"toggleBtn\" onClick={this.handleToggle}>{this.state.doublesAvailable ? \"Double Your Sheep\" : \"Back to One Sheep\"}</button> {/* Allows toggle between adding/subtracting by 1 or 2 */}\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n          \r\n\r\n      </div> \r\n  );\r\n}\r\n\r\n}\r\n\r\nexport default Counter;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/sheep.f9711231.png\";","module.exports = __webpack_public_path__ + \"static/media/fence.2e2afe49.png\";"],"sourceRoot":""}